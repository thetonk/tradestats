cmake_minimum_required(VERSION 3.10)
project(FinalProjectRTES VERSION 1.0)

set(EXECUTABLE_OUTPUT_PATH "bin")
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_C_COMPILER gcc)
set(CMAKE_LINK_DIRECTORIES_BEFORE ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON) #useful if using clangd
set(EXECUTABLE_NAME "main" CACHE STRING "Name of the executable")
set(MA_INTERVAL "15" CACHE STRING "Moving average interval in minutes")
set(STATS_OUTPUT_DIR "out" CACHE STRING "Output directory path for statistics and logs (candles, moving averages, trade logs)")
option(DEBUG "Add debug flags on compilation (debug symbols, warnings, etc)" OFF)

if(DEBUG)
  set(CMAKE_C_FLAGS "-O0 -g -rdynamic -Wall -Wextra -funwind-tables -fasynchronous-unwind-tables")
  add_compile_definitions(DEBUG=1)
else()
  set(CMAKE_C_FLAGS "-O2")
endif()

if(CMAKE_TOOLCHAIN_FILE)
  include(${CMAKE_TOOLCHAIN_FILE})
  set(EXECUTABLE_NAME "main-armhf")
  link_directories("${PROJECT_SOURCE_DIR}/lib/raspberry-armhf")
else()
  message(STATUS "Host system: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
  if(${CMAKE_HOST_SYSTEM_PROCESSOR} MATCHES "x86_64")
    link_directories("${PROJECT_SOURCE_DIR}/lib/linux-x86-64")
  else()
    find_library(LWS NAMES websockets)
    if(LWS)
      message(STATUS "Found libwebsockets: ${LWS}")
    else()
      message(FATAL_ERROR "libwebsockets not found!")
    endif()
  endif()
endif()

find_package(OpenSSL REQUIRED)
if(OPENSSL_FOUND)
  message(STATUS "Found OpenSSL version ${OPENSSL_VERSION}!")
  if(OPENSSL_VERSION VERSION_LESS "3.0")
    message(FATAL_ERROR "OpenSSL version 3.0 or higher is required!")
  endif()
endif()

if(MA_INTERVAL)
  add_compile_definitions(MOVING_AVERAGE_INTERVAL_MINUTES=${MA_INTERVAL})
endif()
if(STATS_OUTPUT_DIR)
  add_compile_definitions(OUTPUT_DIRECTORY="${STATS_OUTPUT_DIR}")
endif()

message(STATUS "Using compiler ${CMAKE_C_COMPILER} with compile flags ${CMAKE_C_FLAGS}")
add_subdirectory("${PROJECT_SOURCE_DIR}/src")
add_executable("${EXECUTABLE_NAME}" "${PROJECT_SOURCE_DIR}/main.c")
target_include_directories("${EXECUTABLE_NAME}" PUBLIC "include")
target_link_libraries("${EXECUTABLE_NAME}" myLibs websockets pthread ssl crypto z)
